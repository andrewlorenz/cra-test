{"version":3,"sources":["MovieSearch.js","App.js","reportWebVitals.js","index.js"],"names":["MovieItem","movie","id","imdbID","Title","Year","src","Poster","alt","MovieSearch","useState","movieTitle","setMovieTitle","movieData","setMovieData","totalResults","setTotalResults","fetchStatus","setFetchStatus","onSubmit","evt","a","preventDefault","console","log","queryURL","fetch","response","ok","json","Search","status","className","type","value","onChange","target","onClick","map","ckey","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEMA,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEjB,OACI,qBAAIC,GAAID,EAAME,OAAd,UACA,6BAAKF,EAAMG,QACX,6BAAKH,EAAMI,OACX,6BAAI,qBAAKC,IAAKL,EAAMM,OAAQC,IAAI,iBAqEzBC,EA/DK,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAEhBC,EAFgB,KAEFC,EAFE,OAGkBF,mBAAS,IAH3B,mBAGhBG,EAHgB,KAGFC,EAHE,OAIkBJ,mBAAS,GAJ3B,mBAIhBK,EAJgB,KAIFC,EAJE,OAKkBN,mBAAS,MAL3B,mBAKhBO,EALgB,KAKFC,EALE,KASlBC,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACfD,EAAIE,iBACJC,QAAQC,IAAI,YAENC,EAAW,8BAAgCd,EAAa,gCAC9DY,QAAQC,IAAI,WAAYC,GACxBP,EAAe,eANA,SAOQQ,MAAMD,GAPd,YAOTE,EAPS,QAQFC,GARE,kCAUaD,EAASE,OAVtB,QAULhB,EAVK,OAWXG,EAAgBH,EAAUE,cAC1BD,EAAaD,EAAUiB,QACvBP,QAAQC,IAAI,YAAaX,GAbd,wBAeXU,QAAQC,IAAI,cAAeG,EAASI,QAfzB,QAkBfb,EAAe,0BAlBA,4CAAH,sDAqBd,OACE,sBAAKc,UAAU,YAAf,UACI,8CAEA,kEACA,uBAAM9B,GAAG,eAAT,UACA,uBAAO+B,KAAK,OAAOC,MAAOvB,EAAYwB,SA7BjB,SAACf,GAAD,OAASR,EAAcQ,EAAIgB,OAAOF,UA8BvD,wBAAQD,KAAK,SAASI,QAASlB,EAA/B,uBAECF,GACC,4BAAIA,IAGN,yCACA,wBAAOe,UAAU,sBAAjB,UACA,gCACI,+BACA,4CACA,sCACA,6CAGJ,gCACGnB,EAAUyB,KAAI,SAAArC,GAAK,OAClB,cAAC,EAAD,CAAWsC,KAAMtC,EAAME,OAAQF,MAAOA,YAI1C,iDAAoBc,SC1DbyB,MATf,WAEE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCGSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9cfab6bc.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst MovieItem = ({ movie }) => {\r\n    // some logic\r\n    return (\r\n        <tr id={movie.imdbID}>\r\n        <td>{movie.Title}</td>\r\n        <td>{movie.Year}</td>\r\n        <td><img src={movie.Poster} alt=\"poster\" /></td>\r\n      </tr>\r\n    )\r\n\r\n}\r\n\r\nconst MovieSearch = () => {\r\n\r\n  const [ movieTitle,   setMovieTitle   ] = useState('');\r\n  const [ movieData,    setMovieData    ] = useState([]);\r\n  const [ totalResults, setTotalResults ] = useState(0);\r\n  const [ fetchStatus,  setFetchStatus  ] = useState(null);\r\n\r\n  const onChangeMovieTitle = (evt) => setMovieTitle(evt.target.value);\r\n\r\n  const onSubmit = async (evt) => {\r\n    evt.preventDefault();\r\n    console.log('onSubmit');\r\n\r\n    const queryURL = \"https://www.omdbapi.com/?s=\" + movieTitle + \"&y=&plot=short&apikey=trilogy\";\r\n    console.log('queryURL', queryURL);\r\n    setFetchStatus(\"please wait\");\r\n    const response = await fetch(queryURL);\r\n    if (response.ok) {\r\n        // HTTP status is 200-299\r\n        const movieData = await response.json();\r\n        setTotalResults(movieData.totalResults);\r\n        setMovieData(movieData.Search);\r\n        console.log('movieData', movieData);\r\n    } else {\r\n        console.log(\"fetch error\", response.status)\r\n    }\r\n    \r\n    setFetchStatus(\"here are your results!\");\r\n}\r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <h1>Movie Search</h1>\r\n\r\n        <p>Enter a movie title to search for</p>\r\n        <form id=\"movie-search\">\r\n        <input type=\"text\" value={movieTitle} onChange={onChangeMovieTitle} />\r\n        <button type=\"submit\" onClick={onSubmit}>Search</button>  \r\n        </form>\r\n        {fetchStatus && (\r\n          <p>{fetchStatus}</p>\r\n        )}\r\n\r\n        <h3>Results</h3>\r\n        <table className=\"table movie-results\">\r\n        <thead>\r\n            <tr>\r\n            <th>Movie Name</th>\r\n            <th>Year</th>\r\n            <th>Poster</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n          {movieData.map(movie => (\r\n            <MovieItem ckey={movie.imdbID} movie={movie} />\r\n          ))}\r\n        </tbody>\r\n        </table>\r\n        <p>Total results = {totalResults}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieSearch;\r\n","import './App.css';\n//import AltForm from './AltForm.js';\n//import Paged from './pages/Paged';\nimport MovieSearch from './MovieSearch';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <MovieSearch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}